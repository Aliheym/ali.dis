interface TooltipHookOptions {
  text: string;
}

function useTooltip<T extends HTMLElement>() {
  const ref = useRef<T>(null);
  const tooltipRef = useRef<HTMLElement | null>(null);
  if (!ref.current) return ref;

  ref.current.addEventListener('pointerenter', (evt) => {
    if (tooltipRef.current || !ref.current) return;

    const item = document.createElement('div');
    tooltipRef.current = item;

    const rect = ref.current.getBoundingClientRect();
    item.style.position = 'fixed';
    item.style.top = `${rect.top}px`;
    item.style.left = `${rect.right + 20}px`;

    createPortal(<div>asdasddsadsasdds</div>, item);

    console.log(12);

    document.body.appendChild(item);
  });

  ref.current.addEventListener('pointerleave', (evt) => {
    if (!tooltipRef.current) return;

    tooltipRef.current.remove();
    tooltipRef.current = null;
  });

  return ref;
}

const Tooltip: React.FC<{ children: React.ReactElement }> = ({ children }) => {
  return React.cloneElement(children, { ref: useTooltip() });
};